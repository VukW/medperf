name: Release Workflow

on:
  push:
    branches:
      - main

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.extract_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract package version
        id: extract_version
        run: |
          version=$(python3 -c "exec(open('./cli/medperf/_version.py').read()); print(__version__)")
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "version found: [$version]"

  check-release:
    needs: extract-version
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check_release.outputs.should_release }}
    steps:
      - name: Check if release exists
        id: check_release
        run: |
          version=${{ needs.extract-version.outputs.new_version }}
          echo "version found: [$version]"
          if gh release view "v$version" --repo ${{ github.repository }}; then
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

  build-and-sign:
    name: Build distribution üì¶
    needs: check-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    if: needs.check-release.outputs.should_release == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: python -m pip install --upgrade pip wheel setuptools
      - name: Build a binary wheel and a source tarball
        run: |
          cd cli
          python setup.py sdist bdist_wheel
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v1.2.3
        with:
          inputs: ./cli/dist/*.tar.gz ./cli/dist/*.whl
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: cli/dist/

  create-github-release:
    name: >-
      Sign the Python üêç distribution üì¶ with Sigstore
      and upload them to GitHub Release
    needs: [build-and-sign, extract-version]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allows for creating releases
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: cli/dist
      - name: Create and push tag
        run: |
          version=${{ needs.extract-version.outputs.new_version }}
          echo "version found: [$version]"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$version" -m "Release v$version"
          git push origin "v$version"
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=${{ needs.extract-version.outputs.new_version }}
          gh release create "v$version" cli/dist/* --generate-notes --repo ${{ github.repository }}
